[{"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/index.js":"1","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/App.js":"2","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/Credits.js":"3","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Gameboard.js":"4","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Cell.js":"5","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/TitleScreen.js":"6","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/PlacingBoats.js":"7","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Game.js":"8","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/modules/gameboardLogic.js":"9","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/modules/cpuLogic.js":"10"},{"size":319,"mtime":1610160330355,"results":"11","hashOfConfig":"12"},{"size":1989,"mtime":1610737905608,"results":"13","hashOfConfig":"12"},{"size":285,"mtime":1610224475444,"results":"14","hashOfConfig":"12"},{"size":2919,"mtime":1610740872176,"results":"15","hashOfConfig":"12"},{"size":489,"mtime":1610738181169,"results":"16","hashOfConfig":"12"},{"size":950,"mtime":1610739681870,"results":"17","hashOfConfig":"12"},{"size":3023,"mtime":1610740883009,"results":"18","hashOfConfig":"12"},{"size":2010,"mtime":1610740911832,"results":"19","hashOfConfig":"12"},{"size":3841,"mtime":1610691316123,"results":"20","hashOfConfig":"12"},{"size":961,"mtime":1610691311936,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"5oyizi",{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/index.js",[],["44","45"],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/App.js",["46","47"],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/Credits.js",[],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Gameboard.js",["48","49","50","51","52"],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Cell.js",[],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/TitleScreen.js",[],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/PlacingBoats.js",["53","54","55","56"],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/components/Game.js",[],"/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/modules/gameboardLogic.js",["57"],"// HELPER FUNCTIONS\n\nconst giveShipCoords = (boardWidth, selectedCoord, pieceLength, pieceAxis) => {\n  let coordsArray = [];\n\n  let newCoord =\n    pieceAxis === 0 ? selectedCoord : shiftAxis(selectedCoord, boardWidth);\n\n  // This comparison only works on x pieceAxis, that's why the convertion\n  // The remainder of the cord / boardSize dimention gives\n  // how many cells of offset the selectedCoord has from the first cell of the corresponding row\n  // If the dimension of the board side minus the piece offset\n  // equals the piece lengths it means it will fit perfectly.\n\n  if (!(boardWidth - (newCoord % boardWidth) >= pieceLength)) {\n    return null;\n  }\n\n  for (let i = newCoord; i < newCoord + pieceLength; i++) {\n    if (pieceAxis === 0) coordsArray.push(i);\n    else coordsArray.push(shiftAxis(i, boardWidth));\n  }\n\n  return coordsArray;\n};\n\n// This function works on n * n arrays\nfunction shiftAxis(index, arrayWidth) {\n  // if coord is y axis, convert it to it's correspondant as x axis otherwise leave it as it is\n  // That expresion basically shifts the axis\n  return (index % arrayWidth) * arrayWidth + 1 * ((index / arrayWidth) | 0);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction factoryGameboard(boardWidth, generateBoard) {\n  let boats = [];\n\n  let boatsCoords = []; //All coords that are boats\n  let hitsCoords = []; //All coords of boats hits\n  let missesCoords = []; //All coords of missed shots\n\n  //Axis should be either 0 or 1 for x or y\n  const placeShip = (coord, pieceLength, axis) => {\n    boats.push({\n      isSunk: false,\n      pieceLength,\n      coords: giveShipCoords(boardWidth, coord, pieceLength, axis),\n    });\n\n    updateBoatCoords();\n  };\n\n  const checkSunkenShips = () => {\n    boats.forEach((boat) => {\n      let { coords } = boat;\n      //If every coord of the boat IS in hit coords array\n      if (coords.every((coord) => hitsCoords.includes(coord))) {\n        boat.isSunk = true;\n      }\n    });\n  };\n\n  const receiveAttack = (coord) => {\n    if (boatsCoords.includes(coord)) hitsCoords.push(coord);\n    else missesCoords.push(coord);\n\n    checkSunkenShips();\n  };\n\n  const updateBoatCoords = () => {\n    boatsCoords = boats.map((boat) => boat.coords).flat();\n  };\n\n  const checkGameOver = () => {\n    return boatsCoords.length > 0 && boats.every((boat) => boat.isSunk);\n  };\n\n  const placeComputerShips = () => {\n    let shipLengths = [5, 4, 3, 2, 2];\n\n    shipLengths.forEach((shipLength) => {\n      let cellCoord = Math.floor(Math.random() * 99); //From 0 to 99\n      let axis = Math.round(Math.random()); //Either 0 or 1\n      let shipPotentialCoords = giveShipCoords(\n        boardWidth,\n        cellCoord,\n        shipLength,\n        axis\n      );\n\n      // WARNING: The order of these conditions it's important, leftone must evaluate first\n      // If any coord it's already ocuppied, generate new coords\n      while (\n        shipPotentialCoords === null ||\n        shipPotentialCoords.some((coord) => boatsCoords.includes(coord))\n      ) {\n        cellCoord = Math.floor(Math.random() * 99); //From 0 to 99\n        axis = Math.round(Math.random()); //Either 0 or 1\n        shipPotentialCoords = giveShipCoords(\n          boardWidth,\n          cellCoord,\n          shipLength,\n          axis\n        );\n      }\n\n      //Now the cell and axis is addecuate to place a ship\n      placeShip(cellCoord, shipLength, axis);\n    });\n  };\n\n  if (generateBoard) placeComputerShips();\n\n  const getBoatsCoords = () => boatsCoords;\n  const getHitsCoords = () => hitsCoords;\n  const getMissesCoords = () => missesCoords;\n\n  return {\n    getBoatsCoords,\n    getHitsCoords,\n    getMissesCoords,\n    placeShip,\n    receiveAttack,\n    checkGameOver,\n    placeComputerShips,\n  };\n}\n\nexport { factoryGameboard, giveShipCoords, shiftAxis };\n","/home/fernaned/Documentos/the_odin project/JS Path/battleship/src/modules/cpuLogic.js",[],{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","severity":1,"message":"63","line":7,"column":3,"nodeType":"64","messageId":"65","endLine":7,"endColumn":17},{"ruleId":"62","severity":1,"message":"66","line":8,"column":3,"nodeType":"64","messageId":"65","endLine":8,"endColumn":12},{"ruleId":"62","severity":1,"message":"63","line":4,"column":3,"nodeType":"64","messageId":"65","endLine":4,"endColumn":17},{"ruleId":"62","severity":1,"message":"66","line":5,"column":3,"nodeType":"64","messageId":"65","endLine":5,"endColumn":12},{"ruleId":"67","severity":1,"message":"68","line":33,"column":6,"nodeType":"69","endLine":33,"endColumn":8,"suggestions":"70"},{"ruleId":"62","severity":1,"message":"71","line":76,"column":10,"nodeType":"64","messageId":"65","endLine":76,"endColumn":21},{"ruleId":"67","severity":1,"message":"72","line":94,"column":6,"nodeType":"69","endLine":94,"endColumn":20,"suggestions":"73"},{"ruleId":"62","severity":1,"message":"74","line":1,"column":10,"nodeType":"64","messageId":"65","endLine":1,"endColumn":19},{"ruleId":"62","severity":1,"message":"75","line":3,"column":3,"nodeType":"64","messageId":"65","endLine":3,"endColumn":19},{"ruleId":"62","severity":1,"message":"76","line":83,"column":29,"nodeType":"64","messageId":"65","endLine":83,"endColumn":39},{"ruleId":"62","severity":1,"message":"77","line":83,"column":41,"nodeType":"64","messageId":"65","endLine":83,"endColumn":53},{"ruleId":"78","severity":1,"message":"79","line":96,"column":34,"nodeType":"80","messageId":"81","endLine":96,"endColumn":72},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'giveShipCoords' is defined but never used.","Identifier","unusedVar","'shiftAxis' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isPlayerBoard' and 'playerBoard'. Either include them or remove the dependency array.","ArrayExpression",["84"],"'boatsCoords' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isGameover', 'isPlayerBoard', and 'makeCPUmove'. Either include them or remove the dependency array.",["85"],"'useEffect' is defined but never used.","'factoryGameboard' is defined but never used.","'hitsCoords' is assigned a value but never used.","'missesCoords' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'boatsCoords'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation",{"desc":"86","fix":"87"},{"desc":"88","fix":"89"},"Update the dependencies array to be: [isPlayerBoard, playerBoard]",{"range":"90","text":"91"},"Update the dependencies array to be: [isGameover, isPlayerBoard, isPlayerTurn, makeCPUmove]",{"range":"92","text":"93"},[742,744],"[isPlayerBoard, playerBoard]",[2268,2282],"[isGameover, isPlayerBoard, isPlayerTurn, makeCPUmove]"]