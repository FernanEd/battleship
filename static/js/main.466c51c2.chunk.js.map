{"version":3,"sources":["components/TitleScreen.js","modules/gameboardLogic.js","components/PlacingBoats.js","components/Cell.js","components/Gameboard.js","modules/cpuLogic.js","components/Game.js","App.js","Credits.js","index.js"],"names":["TitleScreen","nextScreen","changeDifficulty","id","className","onClick","giveShipCoords","boardWidth","selectedCoord","pieceLength","pieceAxis","coordsArray","newCoord","shiftAxis","i","push","index","arrayWidth","factoryGameboard","generateBoard","boats","boatsCoords","hitsCoords","missesCoords","placeShip","coord","axis","isSunk","coords","updateBoatCoords","map","boat","flat","placeComputerShips","forEach","shipLength","cellCoord","Math","floor","random","round","shipPotentialCoords","some","includes","getBoatsCoords","getHitsCoords","getMissesCoords","receiveAttack","every","checkGameOver","length","PlacingBoats","playerBoard","pieces","useState","currentPiece","setCurrentPiece","hoverCells","setHoverCells","setAxis","setPieceLength","makePlacingAnimation","targetsID","anime","targets","opacity","scale","duration","Array","a","onMouseEnter","cellIndex","cells","handleHover","lastPiece","handleClick","Cell","isPlayerBoard","isHit","isBoat","isMiss","Gameboard","isPlayerTurn","changeTurn","computerDifficulty","isGameover","makeGameOver","gameboard","setGameboard","useEffect","newBoard","markSpot","animateSpot","newGameboard","targetID","makeCPUmove","difficulty","usedCoords","cheatChance","makeCheatMove","number","makeRandomMove","boardAnalisis","setTimeout","Game","setIsPlayerTurn","setIsGameover","winner","setWinner","didPlayerWin","class","App","currentScreen","setCurrentScreen","setComputerDifficulty","setPlayerBoard","current","makeTransition","translateY","easing","newDifficulty","Copyright","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.466c51c2.chunk.js","sourcesContent":["import { ImSmile2, ImGrin2, ImEvil2 } from 'react-icons/im';\n\nexport default function TitleScreen({ nextScreen, changeDifficulty }) {\n  return (\n    <div>\n      <h1 id=\"main-title\">Battleship</h1>\n      <h2>Select CPU difficulty</h2>\n      <div className=\"difficulty-wrapper\">\n        <div\n          onClick={() => {\n            changeDifficulty(0);\n            nextScreen();\n          }}\n          className=\"difficulty-item\"\n        >\n          <ImSmile2 />\n          Mild\n        </div>\n        <div\n          onClick={() => {\n            changeDifficulty(1);\n            nextScreen();\n          }}\n          className=\"difficulty-item\"\n        >\n          <ImGrin2 />\n          Spicy\n        </div>\n        <div\n          onClick={() => {\n            changeDifficulty(2);\n            nextScreen();\n          }}\n          className=\"difficulty-item\"\n        >\n          <ImEvil2 />\n          Devilish\n        </div>\n      </div>\n    </div>\n  );\n}\n","// HELPER FUNCTIONS\n\nconst giveShipCoords = (boardWidth, selectedCoord, pieceLength, pieceAxis) => {\n  let coordsArray = [];\n\n  let newCoord =\n    pieceAxis === 0 ? selectedCoord : shiftAxis(selectedCoord, boardWidth);\n\n  // This comparison only works on x pieceAxis, that's why the convertion\n  // The remainder of the cord / boardSize dimention gives\n  // how many cells of offset the selectedCoord has from the first cell of the corresponding row\n  // If the dimension of the board side minus the piece offset\n  // equals the piece lengths it means it will fit perfectly.\n\n  if (!(boardWidth - (newCoord % boardWidth) >= pieceLength)) {\n    return null;\n  }\n\n  for (let i = newCoord; i < newCoord + pieceLength; i++) {\n    if (pieceAxis === 0) coordsArray.push(i);\n    else coordsArray.push(shiftAxis(i, boardWidth));\n  }\n\n  return coordsArray;\n};\n\n// This function works on n * n arrays\nfunction shiftAxis(index, arrayWidth) {\n  // if coord is y axis, convert it to it's correspondant as x axis otherwise leave it as it is\n  // That expresion basically shifts the axis\n  return (index % arrayWidth) * arrayWidth + 1 * ((index / arrayWidth) | 0);\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction factoryGameboard(boardWidth, generateBoard) {\n  let boats = [];\n\n  let boatsCoords = []; //All coords that are boats\n  let hitsCoords = []; //All coords of boats hits\n  let missesCoords = []; //All coords of missed shots\n\n  //Axis should be either 0 or 1 for x or y\n  const placeShip = (coord, pieceLength, axis) => {\n    boats.push({\n      isSunk: false,\n      pieceLength,\n      coords: giveShipCoords(boardWidth, coord, pieceLength, axis),\n    });\n\n    updateBoatCoords();\n  };\n\n  const checkSunkenShips = () => {\n    boats.forEach((boat) => {\n      let { coords } = boat;\n      //If every coord of the boat IS in hit coords array\n      if (coords.every((coord) => hitsCoords.includes(coord))) {\n        boat.isSunk = true;\n      }\n    });\n  };\n\n  const receiveAttack = (coord) => {\n    if (boatsCoords.includes(coord)) hitsCoords.push(coord);\n    else missesCoords.push(coord);\n\n    checkSunkenShips();\n  };\n\n  const updateBoatCoords = () => {\n    boatsCoords = boats.map((boat) => boat.coords).flat();\n  };\n\n  const checkGameOver = () => {\n    return boatsCoords.length > 0 && boats.every((boat) => boat.isSunk);\n  };\n\n  const placeComputerShips = () => {\n    let shipLengths = [5, 4, 3, 2, 2];\n\n    shipLengths.forEach((shipLength) => {\n      let cellCoord = Math.floor(Math.random() * 99); //From 0 to 99\n      let axis = Math.round(Math.random()); //Either 0 or 1\n      let shipPotentialCoords = giveShipCoords(\n        boardWidth,\n        cellCoord,\n        shipLength,\n        axis\n      );\n\n      // WARNING: The order of these conditions it's important, leftone must evaluate first\n      // If any coord it's already ocuppied, generate new coords\n      while (\n        shipPotentialCoords === null ||\n        shipPotentialCoords.some((coord) => boatsCoords.includes(coord))\n      ) {\n        cellCoord = Math.floor(Math.random() * 99); //From 0 to 99\n        axis = Math.round(Math.random()); //Either 0 or 1\n        shipPotentialCoords = giveShipCoords(\n          boardWidth,\n          cellCoord,\n          shipLength,\n          axis\n        );\n      }\n\n      //Now the cell and axis is addecuate to place a ship\n      placeShip(cellCoord, shipLength, axis);\n    });\n  };\n\n  if (generateBoard) placeComputerShips();\n\n  const getBoatsCoords = () => boatsCoords;\n  const getHitsCoords = () => hitsCoords;\n  const getMissesCoords = () => missesCoords;\n\n  return {\n    getBoatsCoords,\n    getHitsCoords,\n    getMissesCoords,\n    placeShip,\n    receiveAttack,\n    checkGameOver,\n    placeComputerShips,\n  };\n}\n\nexport { factoryGameboard, giveShipCoords, shiftAxis };\n","import { useEffect, useState } from 'react';\nimport {\n  factoryGameboard,\n  giveShipCoords,\n  shiftAxis,\n} from '../modules/gameboardLogic';\n\nimport anime from 'animejs/lib/anime.es.js';\n\nexport default function PlacingBoats({ playerBoard, placeShip, nextScreen }) {\n  // BOARD STATE\n  const boardWidth = 10;\n  const pieces = [5, 4, 3, 2, 2];\n  let [currentPiece, setCurrentPiece] = useState(0);\n\n  const [hoverCells, setHoverCells] = useState([]);\n  const [axis, setAxis] = useState(0);\n  const [pieceLength, setPieceLength] = useState(pieces[currentPiece]);\n\n  //After this function runs, the useEffect of the bottom is supposed to run\n  const handleClick = (cellIndex) => {\n    let boatsCoords = playerBoard.getBoatsCoords();\n\n    let shipPotentialCoords = giveShipCoords(\n      boardWidth,\n      cellIndex,\n      pieceLength,\n      axis\n    );\n\n    if (\n      shipPotentialCoords &&\n      shipPotentialCoords.every((coord) => !boatsCoords.includes(coord))\n    ) {\n      makePlacingAnimation(\n        shipPotentialCoords.map((coord) => `#cell-${coord}`)\n      );\n      let lastPiece = currentPiece;\n      setCurrentPiece(lastPiece + 1);\n      setPieceLength(pieces[lastPiece + 1]);\n      placeShip(cellIndex, pieceLength, axis);\n    }\n  };\n\n  const makePlacingAnimation = (targetsID) => {\n    anime({\n      targets: targetsID,\n      opacity: [0, 1],\n      scale: [1.6, 1],\n      duration: 700,\n    });\n  };\n\n  const handleHover = (cellIndex) => {\n    let newCoord = axis === 0 ? cellIndex : shiftAxis(cellIndex, boardWidth);\n\n    if (!(boardWidth - (newCoord % boardWidth) >= pieceLength)) {\n      setHoverCells([]);\n      return;\n    }\n\n    let cells = [];\n\n    for (let i = newCoord; i < newCoord + pieceLength; i++) {\n      if (axis === 0) cells.push(i);\n      else cells.push(shiftAxis(i, boardWidth));\n    }\n\n    setHoverCells(cells);\n  };\n\n  const toggleAxis = () => {\n    setAxis(axis === 0 ? 1 : 0);\n  };\n\n  return (\n    <div className=\"placing-wrapper\">\n      <button className=\"btn btn-secondary\" onClick={toggleAxis}>\n        Shift axis\n      </button>\n      <div className=\"gameboard-grid\">\n        {[...new Array(boardWidth * boardWidth)].map((a, i) => {\n          let [boatsCoords, hitsCoords, missesCoords] = [\n            playerBoard.getBoatsCoords(),\n            playerBoard.getHitsCoords(),\n            playerBoard.getMissesCoords(),\n          ];\n          return (\n            <div\n              id={`cell-${i}`}\n              key={i}\n              index={i}\n              onMouseEnter={() => handleHover(i)}\n              onClick={() => handleClick(i)}\n              className={\n                boatsCoords.includes(i)\n                  ? 'boat'\n                  : hoverCells.includes(i)\n                  ? 'hovered'\n                  : 'cell'\n              }\n            ></div>\n          );\n        })}\n      </div>\n      {currentPiece >= pieces.length ? (\n        <button className=\"btn btn-primary\" onClick={nextScreen}>\n          Start game\n        </button>\n      ) : null}\n    </div>\n  );\n}\n","export default function Cell({\n  isPlayerBoard,\n  isHit,\n  isBoat,\n  isMiss,\n  index,\n  handleClick,\n}) {\n  //For player boat\n  if (isPlayerBoard) {\n    return (\n      <div\n        id={`player-cell-${index}`}\n        className={isHit ? 'hit' : isBoat ? 'boat' : isMiss ? 'miss' : 'cell'}\n      ></div>\n    );\n  }\n\n  return (\n    <div\n      id={`computer-cell-${index}`}\n      onClick={() => handleClick(index)}\n      className={isHit ? 'hit' : isMiss ? 'miss' : 'cell'}\n    ></div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport {\n  factoryGameboard,\n  giveShipCoords,\n  shiftAxis,\n} from '../modules/gameboardLogic';\nimport Cell from './Cell';\nimport boardAnalisis from '../modules/cpuLogic';\n\nimport anime from 'animejs/lib/anime.es.js';\n\nexport default function Gameboard({\n  playerBoard,\n  isPlayerBoard,\n  isPlayerTurn,\n  changeTurn,\n  computerDifficulty,\n  isGameover,\n  makeGameOver,\n}) {\n  // BOARD STATE\n  const boardWidth = 10;\n  const [gameboard, setGameboard] = useState(\n    factoryGameboard(boardWidth, !isPlayerBoard)\n  );\n\n  //If is the player board, place the boat placement\n  useEffect(() => {\n    if (isPlayerBoard) {\n      let newBoard = { ...playerBoard };\n      setGameboard(newBoard);\n    }\n  }, []);\n\n  const markSpot = (coord) => {\n    animateSpot(\n      isPlayerBoard ? `#player-cell-${coord}` : `#computer-cell-${coord}`\n    );\n\n    let newGameboard = { ...gameboard };\n    newGameboard.receiveAttack(coord);\n    setGameboard(newGameboard);\n\n    //Check for gameovers, end game\n    if (gameboard.checkGameOver()) {\n      makeGameOver(isPlayerTurn);\n    }\n  };\n\n  const animateSpot = (targetID) => {\n    anime({\n      targets: targetID,\n      opacity: [0, 1],\n      scale: [1.6, 1],\n      duration: 700,\n    });\n  };\n\n  const makeCPUmove = () => {\n    let [boatsCoords, hitsCoords, missesCoords] = [\n      gameboard.getBoatsCoords(),\n      gameboard.getHitsCoords(),\n      gameboard.getMissesCoords(),\n    ];\n    markSpot(\n      boardAnalisis(computerDifficulty, boatsCoords, [\n        ...hitsCoords,\n        ...missesCoords,\n      ])\n    );\n    changeTurn();\n  };\n\n  //After this function runs, the useEffect of the bottom is supposed to run\n  const handleClick = (cellIndex) => {\n    let [boatsCoords, hitsCoords, missesCoords] = [\n      gameboard.getBoatsCoords(),\n      gameboard.getHitsCoords(),\n      gameboard.getMissesCoords(),\n    ];\n\n    let usedCoords = [...hitsCoords, ...missesCoords];\n    if (isPlayerTurn && !usedCoords.includes(cellIndex) && !isGameover) {\n      markSpot(cellIndex);\n      changeTurn();\n    }\n  };\n\n  // Every time a move is made\n  useEffect(() => {\n    // Make the CPU move on turn change\n    if (!isPlayerTurn && isPlayerBoard && !isGameover)\n      setTimeout(makeCPUmove, 500);\n  }, [isPlayerTurn]);\n\n  return (\n    <div className=\"gameboard-grid\">\n      {[...new Array(boardWidth * boardWidth)].map((a, i) => {\n        let [boatsCoords, hitsCoords, missesCoords] = [\n          gameboard.getBoatsCoords(),\n          gameboard.getHitsCoords(),\n          gameboard.getMissesCoords(),\n        ];\n        return (\n          <Cell\n            key={i}\n            index={i}\n            isPlayerBoard={isPlayerBoard}\n            isHit={hitsCoords.includes(i)}\n            isBoat={boatsCoords.includes(i)}\n            isMiss={missesCoords.includes(i)}\n            handleClick={handleClick}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","export default function boardAnalisis(difficulty, boatsCoords, usedCoords) {\n  const makeRandomMove = () => {\n    let number = Math.floor(Math.random() * 100);\n    let i = 0;\n\n    // i will prevent infinite loops\n    while (usedCoords.includes(number) && i < 100) {\n      number = Math.floor(Math.random() * 100);\n      i++;\n    }\n    return number;\n  };\n\n  const makeCheatMove = () => {\n    let index = Math.floor(Math.random() * boatsCoords.length);\n    let i = 0;\n\n    // i will prevent infinite loops\n    while (usedCoords.includes(boatsCoords[index]) && i < 100) {\n      index = Math.floor(Math.random() * boatsCoords.length);\n      i++;\n    }\n    return boatsCoords[index];\n  };\n\n  // Difficulty: | 0 - Standard | 1 - Smart | 2 - Hard\n  let cheatChance = difficulty === 2 ? 20 : difficulty === 1 ? 10 : 5;\n\n  let randNum = Math.round(Math.random() * 100);\n  let canCheat = randNum < cheatChance;\n\n  return canCheat ? makeCheatMove() : makeRandomMove();\n}\n","import { useEffect, useState } from 'react';\nimport Gameboard from './Gameboard';\nimport { ImUser, ImSmile2, ImGrin2, ImEvil2 } from 'react-icons/im';\n\nexport default function Game({ playerBoard, computerDifficulty }) {\n  //player 0 = human, player 1 = computer\n  let [isPlayerTurn, setIsPlayerTurn] = useState(true);\n  const [isGameover, setIsGameover] = useState(false);\n  const [winner, setWinner] = useState();\n\n  const changeTurn = () => {\n    let lastTurn = isPlayerTurn;\n    setIsPlayerTurn(!lastTurn);\n  };\n\n  const makeGameOver = (didPlayerWin) => {\n    setIsGameover(true);\n    if (didPlayerWin) setWinner('Player');\n    else setWinner('CPU');\n  };\n\n  useEffect(() => {}, []);\n\n  return (\n    <div>\n      <div className=\"gameboard-header\">\n        <h1>\n          {isGameover\n            ? `${winner} wins!`\n            : isPlayerTurn\n            ? 'Make your turn'\n            : 'CPU turn'}\n        </h1>\n      </div>\n\n      <div className=\"gameboard-wrapper\">\n        <div>\n          <h1 className=\"gameboard-title\">\n            Player <ImUser />\n          </h1>\n          <Gameboard\n            isPlayerBoard={true}\n            isPlayerTurn={isPlayerTurn}\n            playerBoard={playerBoard}\n            changeTurn={changeTurn}\n            computerDifficulty={computerDifficulty}\n            isGameover={isGameover}\n            makeGameOver={makeGameOver}\n          />\n        </div>\n        <div>\n          <h1 class=\"gameboard-title\">\n            Computer{' '}\n            {computerDifficulty === 2 ? (\n              <ImEvil2 />\n            ) : computerDifficulty === 1 ? (\n              <ImGrin2 />\n            ) : (\n              <ImSmile2 />\n            )}\n          </h1>\n          <Gameboard\n            isPlayerBoard={false}\n            isPlayerTurn={isPlayerTurn}\n            changeTurn={changeTurn}\n            computerDifficulty={computerDifficulty}\n            isGameover={isGameover}\n            makeGameOver={makeGameOver}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from 'react';\nimport TitleScreen from './components/TitleScreen';\nimport PlacingBoats from './components/PlacingBoats';\nimport Game from './components/Game';\nimport {\n  factoryGameboard,\n  giveShipCoords,\n  shiftAxis,\n} from './modules/gameboardLogic';\n\nimport anime from 'animejs/lib/anime.es.js';\n\nexport default function App() {\n  const [currentScreen, setCurrentScreen] = useState(0);\n  //This should be here\n  const [computerDifficulty, setComputerDifficulty] = useState(0);\n  const [playerBoard, setPlayerBoard] = useState(factoryGameboard(10, false));\n\n  const changeDifficulty = (newDifficulty) => {\n    setComputerDifficulty(newDifficulty);\n  };\n\n  const nextScreen = () => {\n    let current = currentScreen;\n    current++;\n    if (current > 2) current = 0;\n\n    makeTransition();\n    setCurrentScreen(current);\n  };\n\n  const placeShip = (coord, pieceLength, axis) => {\n    let newGameboard = { ...playerBoard };\n    newGameboard.placeShip(coord, pieceLength, axis);\n    setPlayerBoard(newGameboard);\n  };\n\n  useEffect(() => {\n    makeTransition();\n  }, []);\n\n  const makeTransition = () => {\n    anime({\n      targets: '#content',\n      translateY: [0, 10],\n      opacity: [0, 1],\n      duration: 300,\n      easing: 'linear',\n    });\n  };\n\n  return (\n    <div id=\"content\">\n      {currentScreen === 0 ? (\n        <TitleScreen\n          nextScreen={nextScreen}\n          changeDifficulty={changeDifficulty}\n        />\n      ) : currentScreen === 1 ? (\n        <div>\n          <div className=\"gameboard-header\">\n            <h1>Place your float</h1>\n          </div>\n          <div className=\"gameboard-wrapper\">\n            <PlacingBoats\n              playerBoard={playerBoard}\n              placeShip={placeShip}\n              nextScreen={nextScreen}\n            />\n          </div>\n        </div>\n      ) : (\n        <Game\n          playerBoard={playerBoard}\n          computerDifficulty={computerDifficulty}\n        />\n      )}\n    </div>\n  );\n}\n","import { AiFillGithub } from 'react-icons/ai';\n\nexport default function Copyright() {\n  return (\n    <p>\n      Made by{' '}\n      <a href=\"https://github.com/FernanEd\" target=\"_blank\" rel=\"noreferrer\">\n        <AiFillGithub />\n        FernanEd\n      </a>\n      . 2020.\n    </p>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Credits from './Credits';\nimport './style.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(<Credits />, document.getElementById('credits'));\n"],"sourceRoot":""}